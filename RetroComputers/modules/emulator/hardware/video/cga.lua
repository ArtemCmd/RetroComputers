-- =====================================================================================================================================================================
-- IBM Color Graphics Adapter (CGA) emulation.
-- =====================================================================================================================================================================

local common = require("retro_computers:emulator/hardware/video/common")
local band, bor, rshift, lshift, bxor, bnot = bit.band, bit.bor, bit.rshift, bit.lshift, bit.bxor, bit.bnot

local videocard = {}

local palette = {
    [0] = 0x000000, -- Black
    0x0000AA, -- Blue
    0x00AA00, -- Green
    0x00AAAA, -- Cyan
    0xAA0000, -- Red
    0xAA00AA, -- Magenta
    0xAA5500, -- Brown
    0xAAAAAA, -- Light gray
    0x555555, -- Dark gray
    0x5555FF, -- Light blue
    0x55FF55, -- Light green
    0x55FFFF, -- Light cyan
    0xFF5555, -- Light red
    0xFF55FF, -- Light magenta
    0xFFFF55, -- Yellow
    0xFFFFFF  -- White
}

local palettes = {
    {[0] = 0, 2, 4, 6},
    {[0] = 0, 10, 12, 14},
    {[0] = 0, 3, 5, 7},
    {[0] = 0, 11, 13, 15},
    {[0] = 0, 3, 4, 7},
    {[0] = 0, 11, 12, 15}
}

local font_8_8 = {
	[0] = 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x81, 0xA5, 0x81, 0xBD, 0x99, 0x81, 0x7E,
    0x7E, 0xFF, 0xDB, 0xFF, 0xC3, 0xE7, 0xFF, 0x7E, 0x6C, 0xFE, 0xFE, 0xFE, 0x7C, 0x38, 0x10, 0x00,
    0x10, 0x38, 0x7C, 0xFE, 0x7C, 0x38, 0x10, 0x00, 0x38, 0x7C, 0x38, 0xFE, 0xFE, 0x7C, 0x38, 0x7C,
    0x10, 0x10, 0x38, 0x7C, 0xFE, 0x7C, 0x38, 0x7C, 0x00, 0x00, 0x18, 0x3C, 0x3C, 0x18, 0x00, 0x00,
    0xFF, 0xFF, 0xE7, 0xC3, 0xC3, 0xE7, 0xFF, 0xFF, 0x00, 0x3C, 0x66, 0x42, 0x42, 0x66, 0x3C, 0x00,
    0xFF, 0xC3, 0x99, 0xBD, 0xBD, 0x99, 0xC3, 0xFF, 0x0F, 0x07, 0x0F, 0x7D, 0xCC, 0xCC, 0xCC, 0x78,
    0x3C, 0x66, 0x66, 0x66, 0x3C, 0x18, 0x7E, 0x18, 0x3F, 0x33, 0x3F, 0x30, 0x30, 0x70, 0xF0, 0xE0,
    0x7F, 0x63, 0x7F, 0x63, 0x63, 0x67, 0xE6, 0xC0, 0x99, 0x5A, 0x3C, 0xE7, 0xE7, 0x3C, 0x5A, 0x99,
    0x80, 0xE0, 0xF8, 0xFE, 0xF8, 0xE0, 0x80, 0x00, 0x02, 0x0E, 0x3E, 0xFE, 0x3E, 0x0E, 0x02, 0x00,
    0x18, 0x3C, 0x7E, 0x18, 0x18, 0x7E, 0x3C, 0x18, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x00,
    0x7F, 0xDB, 0xDB, 0x7B, 0x1B, 0x1B, 0x1B, 0x00, 0x3E, 0x63, 0x38, 0x6C, 0x6C, 0x38, 0xCC, 0x78,
    0x00, 0x00, 0x00, 0x00, 0x7E, 0x7E, 0x7E, 0x00, 0x18, 0x3C, 0x7E, 0x18, 0x7E, 0x3C, 0x18, 0xFF,
    0x18, 0x3C, 0x7E, 0x18, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x7E, 0x3C, 0x18, 0x00,
    0x00, 0x18, 0x0C, 0xFE, 0x0C, 0x18, 0x00, 0x00, 0x00, 0x30, 0x60, 0xFE, 0x60, 0x30, 0x00, 0x00,
    0x00, 0x00, 0xC0, 0xC0, 0xC0, 0xFE, 0x00, 0x00, 0x00, 0x24, 0x66, 0xFF, 0x66, 0x24, 0x00, 0x00,
    0x00, 0x18, 0x3C, 0x7E, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x7E, 0x3C, 0x18, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x78, 0x78, 0x30, 0x30, 0x00, 0x30, 0x00,
    0x6C, 0x6C, 0x6C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6C, 0x6C, 0xFE, 0x6C, 0xFE, 0x6C, 0x6C, 0x00,
    0x30, 0x7C, 0xC0, 0x78, 0x0C, 0xF8, 0x30, 0x00, 0x00, 0xC6, 0xCC, 0x18, 0x30, 0x66, 0xC6, 0x00,
    0x38, 0x6C, 0x38, 0x76, 0xDC, 0xCC, 0x76, 0x00, 0x60, 0x60, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x18, 0x30, 0x60, 0x60, 0x60, 0x30, 0x18, 0x00, 0x60, 0x30, 0x18, 0x18, 0x18, 0x30, 0x60, 0x00,
    0x00, 0x66, 0x3C, 0xFF, 0x3C, 0x66, 0x00, 0x00, 0x00, 0x30, 0x30, 0xFC, 0x30, 0x30, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x60, 0x00, 0x00, 0x00, 0xFC, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00, 0x06, 0x0C, 0x18, 0x30, 0x60, 0xC0, 0x80, 0x00,
    0x7C, 0xC6, 0xCE, 0xDE, 0xF6, 0xE6, 0x7C, 0x00, 0x30, 0x70, 0x30, 0x30, 0x30, 0x30, 0xFC, 0x00,
    0x78, 0xCC, 0x0C, 0x38, 0x60, 0xCC, 0xFC, 0x00, 0x78, 0xCC, 0x0C, 0x38, 0x0C, 0xCC, 0x78, 0x00,
    0x1C, 0x3C, 0x6C, 0xCC, 0xFE, 0x0C, 0x1E, 0x00, 0xFC, 0xC0, 0xF8, 0x0C, 0x0C, 0xCC, 0x78, 0x00,
    0x38, 0x60, 0xC0, 0xF8, 0xCC, 0xCC, 0x78, 0x00, 0xFC, 0xCC, 0x0C, 0x18, 0x30, 0x30, 0x30, 0x00,
    0x78, 0xCC, 0xCC, 0x78, 0xCC, 0xCC, 0x78, 0x00, 0x78, 0xCC, 0xCC, 0x7C, 0x0C, 0x18, 0x70, 0x00,
    0x00, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x60,
    0x18, 0x30, 0x60, 0xC0, 0x60, 0x30, 0x18, 0x00, 0x00, 0x00, 0xFC, 0x00, 0x00, 0xFC, 0x00, 0x00,
    0x60, 0x30, 0x18, 0x0C, 0x18, 0x30, 0x60, 0x00, 0x78, 0xCC, 0x0C, 0x18, 0x30, 0x00, 0x30, 0x00,
    0x7C, 0xC6, 0xDE, 0xDE, 0xDE, 0xC0, 0x78, 0x00, 0x30, 0x78, 0xCC, 0xCC, 0xFC, 0xCC, 0xCC, 0x00,
    0xFC, 0x66, 0x66, 0x7C, 0x66, 0x66, 0xFC, 0x00, 0x3C, 0x66, 0xC0, 0xC0, 0xC0, 0x66, 0x3C, 0x00,
    0xF8, 0x6C, 0x66, 0x66, 0x66, 0x6C, 0xF8, 0x00, 0xFE, 0x62, 0x68, 0x78, 0x68, 0x62, 0xFE, 0x00,
    0xFE, 0x62, 0x68, 0x78, 0x68, 0x60, 0xF0, 0x00, 0x3C, 0x66, 0xC0, 0xC0, 0xCE, 0x66, 0x3E, 0x00,
    0xCC, 0xCC, 0xCC, 0xFC, 0xCC, 0xCC, 0xCC, 0x00, 0x78, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00,
    0x1E, 0x0C, 0x0C, 0x0C, 0xCC, 0xCC, 0x78, 0x00, 0xE6, 0x66, 0x6C, 0x78, 0x6C, 0x66, 0xE6, 0x00,
    0xF0, 0x60, 0x60, 0x60, 0x62, 0x66, 0xFE, 0x00, 0xC6, 0xEE, 0xFE, 0xFE, 0xD6, 0xC6, 0xC6, 0x00,
    0xC6, 0xE6, 0xF6, 0xDE, 0xCE, 0xC6, 0xC6, 0x00, 0x38, 0x6C, 0xC6, 0xC6, 0xC6, 0x6C, 0x38, 0x00,
    0xFC, 0x66, 0x66, 0x7C, 0x60, 0x60, 0xF0, 0x00, 0x78, 0xCC, 0xCC, 0xCC, 0xDC, 0x78, 0x1C, 0x00,
    0xFC, 0x66, 0x66, 0x7C, 0x6C, 0x66, 0xE6, 0x00, 0x78, 0xCC, 0xE0, 0x70, 0x1C, 0xCC, 0x78, 0x00,
    0xFC, 0xB4, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xFC, 0x00,
    0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x78, 0x30, 0x00, 0xC6, 0xC6, 0xC6, 0xD6, 0xFE, 0xEE, 0xC6, 0x00,
    0xC6, 0xC6, 0x6C, 0x38, 0x38, 0x6C, 0xC6, 0x00, 0xCC, 0xCC, 0xCC, 0x78, 0x30, 0x30, 0x78, 0x00,
    0xFE, 0xC6, 0x8C, 0x18, 0x32, 0x66, 0xFE, 0x00, 0x78, 0x60, 0x60, 0x60, 0x60, 0x60, 0x78, 0x00,
    0xC0, 0x60, 0x30, 0x18, 0x0C, 0x06, 0x02, 0x00, 0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x78, 0x00,
    0x10, 0x38, 0x6C, 0xC6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF,
    0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x0C, 0x7C, 0xCC, 0x76, 0x00,
    0xE0, 0x60, 0x60, 0x7C, 0x66, 0x66, 0xDC, 0x00, 0x00, 0x00, 0x78, 0xCC, 0xC0, 0xCC, 0x78, 0x00,
    0x1C, 0x0C, 0x0C, 0x7C, 0xCC, 0xCC, 0x76, 0x00, 0x00, 0x00, 0x78, 0xCC, 0xFC, 0xC0, 0x78, 0x00,
    0x38, 0x6C, 0x60, 0xF0, 0x60, 0x60, 0xF0, 0x00, 0x00, 0x00, 0x76, 0xCC, 0xCC, 0x7C, 0x0C, 0xF8,
    0xE0, 0x60, 0x6C, 0x76, 0x66, 0x66, 0xE6, 0x00, 0x30, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
    0x0C, 0x00, 0x0C, 0x0C, 0x0C, 0xCC, 0xCC, 0x78, 0xE0, 0x60, 0x66, 0x6C, 0x78, 0x6C, 0xE6, 0x00,
    0x70, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00, 0x00, 0x00, 0xCC, 0xFE, 0xFE, 0xD6, 0xC6, 0x00,
    0x00, 0x00, 0xF8, 0xCC, 0xCC, 0xCC, 0xCC, 0x00, 0x00, 0x00, 0x78, 0xCC, 0xCC, 0xCC, 0x78, 0x00,
    0x00, 0x00, 0xDC, 0x66, 0x66, 0x7C, 0x60, 0xF0, 0x00, 0x00, 0x76, 0xCC, 0xCC, 0x7C, 0x0C, 0x1E,
    0x00, 0x00, 0xDC, 0x76, 0x66, 0x60, 0xF0, 0x00, 0x00, 0x00, 0x7C, 0xC0, 0x78, 0x0C, 0xF8, 0x00,
    0x10, 0x30, 0x7C, 0x30, 0x30, 0x34, 0x18, 0x00, 0x00, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0x76, 0x00,
    0x00, 0x00, 0xCC, 0xCC, 0xCC, 0x78, 0x30, 0x00, 0x00, 0x00, 0xC6, 0xD6, 0xFE, 0xFE, 0x6C, 0x00,
    0x00, 0x00, 0xC6, 0x6C, 0x38, 0x6C, 0xC6, 0x00, 0x00, 0x00, 0xCC, 0xCC, 0xCC, 0x7C, 0x0C, 0xF8,
    0x00, 0x00, 0xFC, 0x98, 0x30, 0x64, 0xFC, 0x00, 0x1C, 0x30, 0x30, 0xE0, 0x30, 0x30, 0x1C, 0x00,
    0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x00, 0xE0, 0x30, 0x30, 0x1C, 0x30, 0x30, 0xE0, 0x00,
    0x76, 0xDC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x6C, 0xC6, 0xC6, 0xFE, 0x00,
    0x78, 0xCC, 0xC0, 0xCC, 0x78, 0x18, 0x0C, 0x78, 0x00, 0xCC, 0x00, 0xCC, 0xCC, 0xCC, 0x7E, 0x00,
    0x1C, 0x00, 0x78, 0xCC, 0xFC, 0xC0, 0x78, 0x00, 0x7E, 0xC3, 0x3C, 0x06, 0x3E, 0x66, 0x3F, 0x00,
    0xCC, 0x00, 0x78, 0x0C, 0x7C, 0xCC, 0x7E, 0x00, 0xE0, 0x00, 0x78, 0x0C, 0x7C, 0xCC, 0x7E, 0x00,
    0x30, 0x30, 0x78, 0x0C, 0x7C, 0xCC, 0x7E, 0x00, 0x00, 0x00, 0x78, 0xC0, 0xC0, 0x78, 0x0C, 0x38,
    0x7E, 0xC3, 0x3C, 0x66, 0x7E, 0x60, 0x3C, 0x00, 0xCC, 0x00, 0x78, 0xCC, 0xFC, 0xC0, 0x78, 0x00,
    0xE0, 0x00, 0x78, 0xCC, 0xFC, 0xC0, 0x78, 0x00, 0xCC, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
    0x7C, 0xC6, 0x38, 0x18, 0x18, 0x18, 0x3C, 0x00, 0xE0, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
    0xC6, 0x38, 0x6C, 0xC6, 0xFE, 0xC6, 0xC6, 0x00, 0x30, 0x30, 0x00, 0x78, 0xCC, 0xFC, 0xCC, 0x00,
    0x1C, 0x00, 0xFC, 0x60, 0x78, 0x60, 0xFC, 0x00, 0x00, 0x00, 0x7F, 0x0C, 0x7F, 0xCC, 0x7F, 0x00,
    0x3E, 0x6C, 0xCC, 0xFE, 0xCC, 0xCC, 0xCE, 0x00, 0x78, 0xCC, 0x00, 0x78, 0xCC, 0xCC, 0x78, 0x00,
    0x00, 0xCC, 0x00, 0x78, 0xCC, 0xCC, 0x78, 0x00, 0x00, 0xE0, 0x00, 0x78, 0xCC, 0xCC, 0x78, 0x00,
    0x78, 0xCC, 0x00, 0xCC, 0xCC, 0xCC, 0x7E, 0x00, 0x00, 0xE0, 0x00, 0xCC, 0xCC, 0xCC, 0x7E, 0x00,
    0x00, 0xCC, 0x00, 0xCC, 0xCC, 0x7C, 0x0C, 0xF8, 0xC3, 0x18, 0x3C, 0x66, 0x66, 0x3C, 0x18, 0x00,
    0xCC, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0x78, 0x00, 0x18, 0x18, 0x7E, 0xC0, 0xC0, 0x7E, 0x18, 0x18,
    0x38, 0x6C, 0x64, 0xF0, 0x60, 0xE6, 0xFC, 0x00, 0xCC, 0xCC, 0x78, 0xFC, 0x30, 0xFC, 0x30, 0x30,
    0xF8, 0xCC, 0xCC, 0xFA, 0xC6, 0xCF, 0xC6, 0xC7, 0x0E, 0x1B, 0x18, 0x3C, 0x18, 0x18, 0xD8, 0x70,
    0x1C, 0x00, 0x78, 0x0C, 0x7C, 0xCC, 0x7E, 0x00, 0x38, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00,
    0x00, 0x1C, 0x00, 0x78, 0xCC, 0xCC, 0x78, 0x00, 0x00, 0x1C, 0x00, 0xCC, 0xCC, 0xCC, 0x7E, 0x00,
    0x00, 0xF8, 0x00, 0xF8, 0xCC, 0xCC, 0xCC, 0x00, 0xFC, 0x00, 0xCC, 0xEC, 0xFC, 0xDC, 0xCC, 0x00,
    0x3C, 0x6C, 0x6C, 0x3E, 0x00, 0x7E, 0x00, 0x00, 0x38, 0x6C, 0x6C, 0x38, 0x00, 0x7C, 0x00, 0x00,
    0x30, 0x00, 0x30, 0x60, 0xC0, 0xCC, 0x78, 0x00, 0x00, 0x00, 0x00, 0xFC, 0xC0, 0xC0, 0x00, 0x00,
    0x00, 0x00, 0x00, 0xFC, 0x0C, 0x0C, 0x00, 0x00, 0xC3, 0xC6, 0xCC, 0xDE, 0x33, 0x66, 0xCC, 0x0F,
    0xC3, 0xC6, 0xCC, 0xDB, 0x37, 0x6F, 0xCF, 0x03, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00,
    0x00, 0x33, 0x66, 0xCC, 0x66, 0x33, 0x00, 0x00, 0x00, 0xCC, 0x66, 0x33, 0x66, 0xCC, 0x00, 0x00,
    0x22, 0x88, 0x22, 0x88, 0x22, 0x88, 0x22, 0x88, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA,
    0xDB, 0x77, 0xDB, 0xEE, 0xDB, 0x77, 0xDB, 0xEE, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
    0x18, 0x18, 0x18, 0x18, 0xF8, 0x18, 0x18, 0x18, 0x18, 0x18, 0xF8, 0x18, 0xF8, 0x18, 0x18, 0x18,
    0x36, 0x36, 0x36, 0x36, 0xF6, 0x36, 0x36, 0x36, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x36, 0x36, 0x36,
    0x00, 0x00, 0xF8, 0x18, 0xF8, 0x18, 0x18, 0x18, 0x36, 0x36, 0xF6, 0x06, 0xF6, 0x36, 0x36, 0x36,
    0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x00, 0x00, 0xFE, 0x06, 0xF6, 0x36, 0x36, 0x36,
    0x36, 0x36, 0xF6, 0x06, 0xFE, 0x00, 0x00, 0x00, 0x36, 0x36, 0x36, 0x36, 0xFE, 0x00, 0x00, 0x00,
    0x18, 0x18, 0xF8, 0x18, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x18, 0x18, 0x18,
    0x18, 0x18, 0x18, 0x18, 0x1F, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0xFF, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0xFF, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1F, 0x18, 0x18, 0x18,
    0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0xFF, 0x18, 0x18, 0x18,
    0x18, 0x18, 0x1F, 0x18, 0x1F, 0x18, 0x18, 0x18, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36,
    0x36, 0x36, 0x37, 0x30, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x30, 0x37, 0x36, 0x36, 0x36,
    0x36, 0x36, 0xF7, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xF7, 0x36, 0x36, 0x36,
    0x36, 0x36, 0x37, 0x30, 0x37, 0x36, 0x36, 0x36, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00,
    0x36, 0x36, 0xF7, 0x00, 0xF7, 0x36, 0x36, 0x36, 0x18, 0x18, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00,
    0x36, 0x36, 0x36, 0x36, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0x18, 0x18, 0x18,
    0x00, 0x00, 0x00, 0x00, 0xFF, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x3F, 0x00, 0x00, 0x00,
    0x18, 0x18, 0x1F, 0x18, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x18, 0x1F, 0x18, 0x18, 0x18,
    0x00, 0x00, 0x00, 0x00, 0x3F, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xFF, 0x36, 0x36, 0x36,
    0x18, 0x18, 0xFF, 0x18, 0xFF, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xF8, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x1F, 0x18, 0x18, 0x18, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
    0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x76, 0xDC, 0xC8, 0xDC, 0x76, 0x00, 0x00, 0x78, 0xCC, 0xF8, 0xCC, 0xF8, 0xC0, 0xC0,
    0x00, 0xFC, 0xCC, 0xC0, 0xC0, 0xC0, 0xC0, 0x00, 0x00, 0xFE, 0x6C, 0x6C, 0x6C, 0x6C, 0x6C, 0x00,
    0xFC, 0xCC, 0x60, 0x30, 0x60, 0xCC, 0xFC, 0x00, 0x00, 0x00, 0x7E, 0xD8, 0xD8, 0xD8, 0x70, 0x00,
    0x00, 0x66, 0x66, 0x66, 0x66, 0x7C, 0x60, 0xC0, 0x00, 0x76, 0xDC, 0x18, 0x18, 0x18, 0x18, 0x00,
    0xFC, 0x30, 0x78, 0xCC, 0xCC, 0x78, 0x30, 0xFC, 0x38, 0x6C, 0xC6, 0xFE, 0xC6, 0x6C, 0x38, 0x00,
    0x38, 0x6C, 0xC6, 0xC6, 0x6C, 0x6C, 0xEE, 0x00, 0x1C, 0x30, 0x18, 0x7C, 0xCC, 0xCC, 0x78, 0x00,
    0x00, 0x00, 0x7E, 0xDB, 0xDB, 0x7E, 0x00, 0x00, 0x06, 0x0C, 0x7E, 0xDB, 0xDB, 0x7E, 0x60, 0xC0,
    0x38, 0x60, 0xC0, 0xF8, 0xC0, 0x60, 0x38, 0x00, 0x78, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x00,
    0x00, 0xFC, 0x00, 0xFC, 0x00, 0xFC, 0x00, 0x00, 0x30, 0x30, 0xFC, 0x30, 0x30, 0x00, 0xFC, 0x00,
    0x60, 0x30, 0x18, 0x30, 0x60, 0x00, 0xFC, 0x00, 0x18, 0x30, 0x60, 0x30, 0x18, 0x00, 0xFC, 0x00,
    0x0E, 0x1B, 0x1B, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xD8, 0xD8, 0x70,
    0x30, 0x30, 0x00, 0xFC, 0x00, 0x30, 0x30, 0x00, 0x00, 0x76, 0xDC, 0x00, 0x76, 0xDC, 0x00, 0x00,
    0x38, 0x6C, 0x6C, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x0F, 0x0C, 0x0C, 0x0C, 0xEC, 0x6C, 0x3C, 0x1C,
    0x78, 0x6C, 0x6C, 0x6C, 0x6C, 0x00, 0x00, 0x00, 0x70, 0x18, 0x30, 0x60, 0x78, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x3C, 0x3C, 0x3C, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
}

local crtc_regs_write = {
    [0x00] = function(self, val) -- Horizontal Total Register
    end,
    [0x01] = function(self, val) -- Horizontal Displayed Register
        self.crtc_horizontal_displayed = val
    end,
    [0x02] = function(self, val) -- Horizontal Sync Position Register
    end,
    [0x03] = function(self, val) -- Horizontal Sync Pulse Width Register
    end,
    [0x04] = function(self, val) -- Vertical Total Register
        self.crtc_vertical_total = band(val, 0x7F)
    end,
    [0x05] = function(self, val) -- Vertical Total Adjust Register
    end,
    [0x06] = function(self, val) -- Vertical Displayed Register
        self.crtc_vertical_displayed = band(val, 0x7F)
    end,
    [0x07] = function(self, val) -- Vertical Sync Register
        self.crtc_vsync = band(val, 0x7F)
    end,
    [0x08] = function(self, val) -- Interlase Mode Register
    end,
    [0x09] = function(self, val) -- Max Scan Line Register
        self.crtc_max_scanline = band(val, 0x1F)
    end,
    [0x0A] = function(self, val) -- Cursor Start Register
        self.crtc_cursor_start = band(val, 0x1F)
        self.cursor_shape = band(val, 0x60)
    end,
    [0x0B] = function(self, val) -- Cursor End Register
        self.crtc_cursor_end = band(val, 0x1F)
    end,
    [0x0C] = function(self, val) -- Start Address Register High
        self.crtc_start_addr = bor(band(self.crtc_start_addr, 0x00FF), lshift(band(val, 0x3F), 8))
    end,
    [0x0D] = function(self, val) -- Start Address Register Low
        self.crtc_start_addr = bor(band(self.crtc_start_addr, 0xFF00), val)
    end,
    [0x0E] = function(self, val) -- Cursor Location Register High
        self.crtc_cursor_addr = bor(band(self.crtc_cursor_addr, 0x00FF), lshift(val, 8))
    end,
    [0x0F] = function(self, val) -- Cursor Location Register Low
        self.crtc_cursor_addr = bor(band(self.crtc_cursor_addr, 0xFF00), val)
    end
}

local crtc_regs_read = {
    [0x0E] = function(self)
        return band(rshift(self.crtc_cursor_addr, 8), 0xFF)
    end,
    [0x0F] = function(self)
        return band(self.crtc_cursor_addr, 0xFF)
    end,
    [0x10] = function(self)
        return band(rshift(self.crtc_lp_latch, 8), 0xFF)
    end,
    [0x11] = function(self)
        return band(self.crtc_lp_latch, 0xFF)
    end
}

local function update_palette(self)
    local index

    if self.mode_bw and self.mode_graphics and (not self.mode_hires_graphics) then
        index = 5
    elseif band(self.cc_register, 0x20) ~= 0 then
        index = 3
    else
        index = 1
    end

    if band(self.cc_register, 0x10) ~= 0 then
        index = index + 1
    end

    self.cc_altcolor = band(self.cc_register, 0x0F)
    self.palette = palettes[index]
    self.palette_mono[1] = palette[self.cc_altcolor]
end

local function update_latch(self)
    self.crtc_lp_latch = self.current_line * self.crtc_horizontal_displayed
end

-- VRAM
local function vram_read(self, addr)
	return self[band(addr, 0x3FFF)]
end

local function vram_write(self, addr, val)
	self[band(addr, 0x3FFF)] = val
end

-- Render
local function render_line_blank(self)
    local screen_addr = self.current_line * self.width
    local color

    if self.mode_hires_graphics then
        color = 0x000000
    else
        color = palette[self.cc_altcolor]
    end

    for x = 0, self.width - 1, 1 do
        self.screen:set_pixel_rgb_i(screen_addr + x, color)
    end
end

local function render_line_empty(self)
    local screen_addr = self.current_line * self.width

    for x = 0, self.width - 1, 1 do
        self.screen:set_pixel_rgb_i(screen_addr + x, 0x000000)
    end
end

local function render_line_text(self)
    local screen_addr = self.current_line * self.width

    for x = 0, self.width - 1, 8 do
        local draw_cursor = (self.memory_addr == self.crtc_cursor_addr) and self.cursor_visible and self.cursor_on
        local addr = lshift(self.memory_addr, 1)
        local chr = self.vram[band(addr, 0x3FFF)]
        local attr = self.vram[band(addr + 1, 0x3FFF)]
        local background_index = band(rshift(attr, 4), 0x0F)
        local foreground_index = band(attr, 0x0F)
        local background
        local foreground
        local glyph_row = font_8_8[lshift(chr, 3) + self.scanline]
        local color

        if self.mode_blink then
            background_index = band(rshift(attr, 4), 0x07)

            if (band(self.blink, 0x08) ~= 0) and (band(attr, 0x80) ~= 0) and (not draw_cursor) then
                foreground_index = background_index
            end
        else
            background_index = band(rshift(attr, 4), 0x0F)
        end

        if draw_cursor then
            background = palette[bxor(background_index, 0x0F)]
            foreground = palette[bxor(foreground_index, 0x0F)]
        else
            background = palette[background_index]
            foreground = palette[foreground_index]
        end

        for i = 0, 7, 1 do
            if band(glyph_row, rshift(0x80, i)) ~= 0 then
                color = foreground
            else
                color = background
            end

            self.screen:set_pixel_rgb_i(screen_addr + x + i, color)
        end

        self.memory_addr = self.memory_addr + 1
    end
end

local function render_line_graphics_low(self)
    local y = self.current_line * 320

    for x = 0, 319, 8 do
        local addr = band(lshift(self.memory_addr, 1), 0x1FFF) + (band(self.scanline, 0x01) * 0x2000)
        local data = bor(lshift(self.vram[addr], 8), self.vram[addr + 1])

        self.memory_addr = self.memory_addr + 1

        for i = 0, 7, 1 do
            local index = band(rshift(data, 14), 0x03)

            if index == 0 then
                index = self.cc_altcolor
            else
                index = self.palette[index]
            end

            local color = palette[index]
            self.screen:set_pixel_rgb_i(y + x + i, color)
            data = lshift(data, 2)
        end
    end
end

local function render_line_graphics_high(self)
    local y = self.current_line * 640

    for x = 0, 639, 8 do
        local addr = band(self.memory_addr, 0x1FFF) + (band(self.scanline, 0x01) * 0x2000)
        local data = self.vram[addr]

        self.memory_addr = self.memory_addr + 1

        for i = 0, 7, 1 do
            local color = band(rshift(data, 7), 0x01)
            self.screen:set_pixel_rgb_i(y + x + i, self.palette_mono[color])
            data = lshift(data, 1)
        end
    end
end

-- Ports
local function port_crtc_register_select_out(self)
    return function(cpu, port, val)
        self.crtc_index = band(val, 0x1F)
    end
end

local function port_crtc_register_select_in(self)
    return function(cpu, port)
        return self.crtc_index
    end
end

local function port_crtc_register_out(self)
    return function(cpu, port, val)
        local reg = crtc_regs_write[self.crtc_index]

        if reg then
            reg(self, val)
        end
    end
end

local function port_crtc_register_in(self)
    return function(cpu, port)
        local reg = crtc_regs_read[self.crtc_index]

        if reg then
            return reg(self)
        end

        return 0xFF
    end
end

local function port_mode_register(self)
    return function(cpu, port, val)
        local mode_changed = (self.mode_hires_text ~= (band(val, 0x01) ~= 0)) or (self.mode_graphics ~= (band(val, 0x02) ~= 0)) or (self.mode_hires_graphics ~= (band(val, 0x10) ~= 0))

        self.mode_hires_text = band(val, 0x01) ~= 0
        self.mode_graphics = band(val, 0x02) ~= 0
        self.mode_enable = band(val, 0x08) ~= 0
        self.mode_hires_graphics = band(val, 0x10) ~= 0
        self.mode_blink = band(val, 0x20) ~= 0
        self.mode_bw = band(val, 0x04) ~= 0

        if mode_changed then
            if self.mode_graphics then
                if self.mode_hires_graphics then
                    self.screen:set_scale(1.0, 2.0)
                    self.width = 640
                    self.render_line = render_line_graphics_high
                else
                    self.screen:set_scale(2.0, 2.0)
                    self.width = 320
                    self.render_line = render_line_graphics_low
                end

                self.screen:set_resolution(self.width, 200)
            else
                self.width = lshift(self.crtc_horizontal_displayed, 3)

                if self.mode_hires_text then
                    self.screen:set_scale(1.0, 2.0)
                else
                    if self.width < 640 then
                       self.screen:set_scale(2.0, 2.0)
                    end
                end

                self.render_line = render_line_text
                self.screen:set_resolution(math.clamp(self.width, 320, 640), 200)
            end
        end

        update_palette(self)
    end
end

local function port_color_control_register(self)
    return function(cpu, port, val)
        self.cc_register = val
        update_palette(self)
    end
end

local function port_status_regsiter_in(self)
    return function(cpu, port)
        self.status = bxor(self.status, 0x09)
        return self.status
    end
end

local function port_lp_reset_register_out_in(self)
    return function(cpu, port, val)
        if self.lp_latch then
            self.lp_latch = false
            self.status = bor(band(self.status, bnot(0x02)), 0x04)
        end

        if not val then
            return 0xFF
        end
    end
end

local function port_lp_set_register_out_in(self)
    return function(cpu, port, val)
        if not self.lp_latch then
            self.lp_latch = true
            self.status = band(bor(self.status, 0x02), bnot(0x04))
            update_latch(self)
        end

        if not val then
            return 0xFF
        end
    end
end

local function update(self)
    for _ = 1, 500, 1 do
        if self.vertical_beam then
            self.vertical_beam = false

            if self.display_on then
                if self.mode_enable then
                    self.render_line(self)
                else
                    render_line_empty(self)
                end
            else
                render_line_blank(self)
            end

            self.current_line = self.current_line + 1

            if self.current_line >= 360 then
                self.current_line = 0
            end
        else
            self.vertical_beam = true

            if self.scanline == self.crtc_cursor_end then
                self.cursor_visible = false
            end

            if self.scanline == self.crtc_max_scanline then
                local old_vc = self.vertical_count

                self.scanline = 0
                self.memory_addr_backup = self.memory_addr
                self.vertical_count = band(self.vertical_count + 1, 0x7F)

                if self.vertical_count == self.crtc_vertical_displayed then
                    self.display_on = false
                end

                if old_vc == self.crtc_vertical_total then
                    self.vertical_count = 0
                    self.memory_addr = self.crtc_start_addr
                    self.memory_addr_backup = self.memory_addr
                    self.display_on = true

                    if self.cursor_shape == 0x20 then
                        self.cursor_on = false
                    elseif self.cursor_shape == 0x60 then
                        self.cursor_on = band(self.blink, 0x10) ~= 0
                    else
                        self.cursor_on = band(self.blink, 0x08) ~= 0
                    end

                    self.current_line = 0
                end

                if self.vertical_count == self.crtc_vsync then
                    self.display_on = false
                    self.current_line = 0
                    self.blink = band(self.blink + 1, 0x7F)

                    if self.crtc_vsync > 0 then
                        self.screen:update()
                    end
                end
            else
                self.scanline = band(self.scanline + 1, 0x1F)
                self.memory_addr = self.memory_addr_backup
            end

            if self.scanline == self.crtc_cursor_start then
                self.cursor_visible = true
            end
        end
    end
end

local function reset(self)
    self.crtc_index = 0
    self.status = 0xF0
    self.palette  = palettes[1]
    self.current_line = 0
    self.memory_addr = 0
    self.memory_addr_backup = 0
    self.blink = 0
    self.scanline = 0
    self.vertical_count = 0
    self.width = 0
    self.cursor_shape = 0
    self.crtc_horizontal_displayed = 0
    self.crtc_vertical_total = 0
    self.crtc_vertical_displayed = 0
    self.crtc_vsync = 0
    self.crtc_max_scanline = 0
    self.crtc_cursor_start = 0
    self.crtc_cursor_end = 0
    self.crtc_start_addr = 0
    self.crtc_cursor_addr = 0
    self.crtc_lp_latch = 0
    self.cc_altcolor = 0
    self.cc_register = 0
    self.vertical_beam = true
    self.display_on = false
    self.cursor_visible = false
    self.mode_enable = false
    self.mode_graphics = false
    self.mode_hires_graphics = false
    self.mode_hires_text = false
    self.mode_blink = false
    self.mode_bw = false
    self.lp_latch = false
    self.palette_mono[1] = palette[0x0F]
    self.screen:set_scale(1.0, 2.0)
    self.screen:set_resolution(640, 200)
end

local function get_type(self)
    return common.TYPE.CGA
end

function videocard.new(cpu, memory, screen)
    local self = {
        screen = screen,
        crtc_index = 0,
        status = 0xF0,
        palette = palettes[1],
        palette_mono = {[0] = palette[0x00], palette[0x0F]},
        current_line = 0,
        memory_addr = 0,
        memory_addr_backup = 0,
        blink = 0,
        scanline = 0,
        vertical_count = 0,
        width = 0,
        cursor_shape = 0x00,
        crtc_horizontal_displayed = 0,
        crtc_vertical_total = 0,
        crtc_vertical_displayed = 0,
        crtc_vsync = 0,
        crtc_max_scanline = 0,
        crtc_cursor_start = 0,
        crtc_cursor_end = 0,
        crtc_start_addr = 0,
        crtc_cursor_addr = 0,
        crtc_lp_latch = 0,
        cc_altcolor = 0,
        cc_register = 0,
        vertical_beam = true,
        display_on = false,
        cursor_visible = false,
        mode_enable = false,
        mode_graphics = false,
        mode_hires_graphics = false,
        mode_hires_text = false,
        mode_blink = false,
        mode_bw = false,
        lp_latch = false,
        vram = {},
        render_line = render_line_text,
        vram_read = vram_read,
        vram_write = vram_write,
        get_type = get_type,
        update = update,
        reset = reset
    }

    local cpu_io = cpu:get_io()
    local lp_reset = port_lp_reset_register_out_in(self)
    local lp_set = port_lp_set_register_out_in(self)

    cpu_io:set_port(0x3D4, port_crtc_register_select_out(self), port_crtc_register_select_in(self))
    cpu_io:set_port(0x3D5, port_crtc_register_out(self), port_crtc_register_in(self))
    cpu_io:set_port_out(0x3D8, port_mode_register(self))
    cpu_io:set_port_out(0x3D9, port_color_control_register(self))
    cpu_io:set_port_in(0x3DA, port_status_regsiter_in(self))
    cpu_io:set_port(0x3DB, lp_reset, lp_reset)
    cpu_io:set_port(0x3DC, lp_set, lp_set)

    -- Initialize VRAM
    for i = 0, 0x3FFF, 1 do
        self.vram[i] = 0x00
    end

    memory:set_mapping(0xB8000, 0x8000, vram_read, vram_write, self.vram)

    return self
end

return videocard
